# ============================================
# Test Client - Development Environment
# CONFIGURACIÓN COMPLETA PARA PRUEBAS
# ============================================

# ============================================
# GLOBAL CONFIGURATION
# ============================================

project_name = "testclient"
environment  = "dev"
location     = "East US"

# ============================================
# AZURE AUTHENTICATION
# ============================================
# IMPORTANTE: Reemplazar con tus valores reales o usar variables de entorno

subscription_id = "your-subscription-id-here"
tenant_id       = "your-tenant-id-here"
client_id       = "your-client-id-here"
client_secret   = "your-client-secret-here"

# ============================================
# TAGS
# ============================================

tags = {
  Project     = "TestClient"
  Environment = "Development"
  ManagedBy   = "Terraform"
  Owner       = "DevOps Team"
}

# ============================================
# RESOURCE GROUP
# ============================================

resource_group = {
  create = true
  name   = "rg-testclient-dev"
}


# ============================================
# STORAGE ACCOUNTS (INDEPENDIENTES)
# ============================================
# Storage para Static Website y datos generales

storage_accounts = {
  website = {
    name                     = "sttestclientdevweb"
    storage_type             = "static_website"
    account_tier             = "Standard"
    account_replication_type = "LRS"
  }
  data = {
    name                     = "sttestclientdevdata"
    storage_type             = "general"
    account_tier             = "Standard"
    account_replication_type = "LRS"
  }
}

# ============================================
# SERVICE BUS
# ============================================

service_bus = {
  create         = true
  namespace_name = "sb-testclient-dev"
  sku            = "Standard"
  
  queues = [
    {
      name                                        = "orders-queue"
      max_size_in_megabytes                      = 1024
      enable_dead_lettering_on_message_expiration = true
      max_delivery_count                         = 10
      duplicate_detection_history_time_window    = "PT10M"
    },
    {
      name                                        = "notifications-queue"
      max_size_in_megabytes                      = 2048
      enable_dead_lettering_on_message_expiration = true
      max_delivery_count                         = 5
    }
  ]
  
  topics = [
    {
      name                  = "events-topic"
      max_size_in_megabytes = 1024
      subscriptions = [
        {
          name                                        = "processor-sub"
          max_delivery_count                          = 10
          enable_dead_lettering_on_message_expiration = true
        },
        {
          name               = "analytics-sub"
          max_delivery_count = 15
        }
      ]
    }
  ]
}

# ============================================
# COSMOS DB
# ============================================

cosmos_db = {
  create            = true
  account_name      = "cosmos-testclient-dev"
  database_name     = "testclient-db"
  enable_serverless = true
  consistency_level = "Session"
  
  containers = [
    {
      name           = "orders"
      partition_keys = ["/customerId"]
      throughput     = null
      default_ttl    = -1
    },
    {
      name           = "customers"
      partition_keys = ["/id"]
      throughput     = null
      default_ttl    = 86400  # 24 horas
    },
    {
      name           = "products"
      partition_keys = ["/category"]
      throughput     = null
      default_ttl    = -1
    }
  ]
}

# ============================================
# KEY VAULT
# ============================================

key_vault = {
  create                     = true
  name                       = "kv-testclient-dev"
  sku_name                   = "standard"
  soft_delete_retention_days = 7
  purge_protection_enabled   = false
  enable_rbac_authorization  = true
}

# ============================================
# API MANAGEMENT
# ============================================

api_management = {
  create          = true
  name            = "apim-testclient-dev"
  publisher_name  = "TestClient"
  publisher_email = "devops@testclient.com"
  sku_name        = "Consumption_0"
}

# ============================================
# SIGNALR SERVICE
# ============================================

signalr = {
  create       = true
  name         = "signalr-testclient-dev"
  sku          = "Free_F1"
  capacity     = 1
  service_mode = "Default"
}

# ============================================
# VIRTUAL NETWORK
# ============================================

vnet = {
  create        = true
  name          = "vnet-testclient-dev"
  address_space = ["10.0.0.0/16"]
  dns_servers   = []
  
  subnets = {
    # Subnet general
    general = {
      name             = "subnet-general"
      address_prefixes = ["10.0.1.0/24"]
      service_endpoints = []
    }
    
    # Subnet para Functions con delegación
    functions = {
      name             = "subnet-functions"
      address_prefixes = ["10.0.2.0/24"]
      service_endpoints = [
        "Microsoft.Storage",
        "Microsoft.KeyVault"
      ]
      delegation = {
        name = "delegation-functions"
        service_delegation = {
          name = "Microsoft.Web/serverFarms"
          actions = [
            "Microsoft.Network/virtualNetworks/subnets/action"
          ]
        }
      }
      private_link_service_network_policies_enabled = false
    }
    
    # Subnet para Private Endpoints
    private_endpoints = {
      name             = "subnet-private-endpoints"
      address_prefixes = ["10.0.3.0/24"]
      service_endpoints = []
      private_link_service_network_policies_enabled = false
    }
  }
}

# ============================================
# AZURE FUNCTIONS - LINUX (FLEX CONSUMPTION)
# ============================================

functions_linux = [
  {
    name    = "fn-testclient-api-dev"
    runtime = "dotnet-isolated"
    version = "8.0"
    app_settings = [
      {
        name         = "ENVIRONMENT"
        value        = "Development"
        slot_setting = false
      },
      {
        name         = "ServiceBusConnection__fullyQualifiedNamespace"
        value        = "sb-testclient-dev.servicebus.windows.net"
        slot_setting = false
      }
    ]
    instance_memory_mb     = 2048
    maximum_instance_count = 100
  },
  {
    name    = "fn-testclient-worker-dev"
    runtime = "dotnet-isolated"
    version = "8.0"
    app_settings = [
      {
        name         = "ENVIRONMENT"
        value        = "Development"
        slot_setting = false
      }
    ]
    instance_memory_mb     = 2048
    maximum_instance_count = 50
  }
]

# ============================================
# AZURE FUNCTIONS - WINDOWS
# ============================================

functions_windows = [
  {
    name                         = "fn-testclient-processor-dev"
    plan_type                    = "consumption"
    create                       = true
    always_on                    = false
    dotnet_version               = "v8.0"
    use_dotnet_isolated_runtime  = true
    application_insights_enabled = true
    
    app_settings = [
      {
        name         = "ENVIRONMENT"
        value        = "Development"
        slot_setting = false
      },
      {
        name         = "CosmosDbEndpoint"
        value        = "https://cosmos-testclient-dev.documents.azure.com:443/"
        slot_setting = false
      }
    ]
    
    identity_type = "SystemAssigned"
  }
]

# ============================================
# FRONT DOOR
# ============================================

front_door = {
  create                   = true
  name                     = "fd-testclient-dev"
  sku_name                 = "Standard_AzureFrontDoor"
  response_timeout_seconds = 120
  
  # Endpoints
  endpoints = {
    web = {
      name    = "web-endpoint"
      enabled = true
    }
  }
  
  # Origin Groups
  origin_groups = {
    static_website = {
      name                     = "static-website-og"
      session_affinity_enabled = false
      
      load_balancing = {
        additional_latency_in_milliseconds = 50
        sample_size                        = 4
        successful_samples_required        = 3
      }
      
      health_probe = {
        interval_in_seconds = 30
        path                = "/"
        protocol            = "Https"
        request_type        = "HEAD"
      }
    }
  }
  
  # Origins
  origins = {
    storage_web = {
      name                           = "storage-website-origin"
      origin_group_key               = "static_website"
      host_name                      = "sttestclientdevweb.z13.web.core.windows.net"  # Ajustar según región
      http_port                      = 80
      https_port                     = 443
      certificate_name_check_enabled = true
      enabled                        = true
      priority                       = 1
      weight                         = 1000
    }
  }
  
  # Rule Sets
  rule_sets = {
    security_rules = {
      name = "SecurityRules"
    }
  }
  
  # Rules
  rules = {
    # Regla 1: Rewrite root a index.html
    rewrite_to_index = {
      name              = "RewriteToIndex"
      rule_set_key      = "security_rules"
      order             = 1
      behavior_on_match = "Continue"
      
      conditions = {
        url_path = {
          operator     = "Equal"
          match_values = ["/"]
        }
      }
      
      actions = {
        url_rewrite = {
          source_pattern          = "/"
          destination             = "/index.html"
          preserve_unmatched_path = false
        }
      }
    }
    
    # Regla 2: Security Headers
    security_headers = {
      name              = "SecurityHeaders"
      rule_set_key      = "security_rules"
      order             = 2
      behavior_on_match = "Continue"
      
      actions = {
        response_headers = {
          "X-Content-Type-Options" = {
            action = "Overwrite"
            value  = "nosniff"
          }
          "Strict-Transport-Security" = {
            action = "Overwrite"
            value  = "max-age=31536000; includeSubDomains"
          }
          "Content-Security-Policy" = {
            action = "Overwrite"
            value  = "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline';"
          }
          "X-Frame-Options" = {
            action = "Overwrite"
            value  = "DENY"
          }
          "Referrer-Policy" = {
            action = "Overwrite"
            value  = "strict-origin-when-cross-origin"
          }
        }
      }
    }
  }
  
  # Routes
  routes = {
    default_route = {
      name                   = "default-route"
      endpoint_key           = "web"
      origin_group_key       = "static_website"
      origin_keys            = ["storage_web"]
      patterns_to_match      = ["/*"]
      supported_protocols    = ["Http", "Https"]
      forwarding_protocol    = "HttpsOnly"
      https_redirect_enabled = true
      enabled                = true
      link_to_default_domain = true
      rule_set_keys          = ["security_rules"]
      
      cache = {
        query_string_caching_behavior = "IgnoreQueryString"
        compression_enabled           = true
        content_types_to_compress     = [
          "text/html",
          "text/css",
          "text/javascript",
          "application/javascript",
          "application/json",
          "application/xml"
        ]
      }
      
      custom_domains = []
    }
  }
  
  custom_domains = {}
}
