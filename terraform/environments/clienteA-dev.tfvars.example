# ============================================
# Test Client - Development Environment
# ============================================

# Global
project_name = "testclient"
environment  = "dev"
location     = "East US"

# Azure Authentication
subscription_id = "your-subscription-id-here"
tenant_id       = "your-tenant-id-here"
client_id       = "your-client-id-here"
client_secret   = "your-client-secret-here"

# Tags
tags = {
  Project     = "TestClient"
  Environment = "Development"
  CostCenter  = "Engineering"
  Owner       = "DevOps Team"
}

# Resource Group
resource_group = {
  create = true
  name   = "testclient-dev-rg"
}

# Application Insights
application_insights = {
  create_workspace = true
  workspace_name   = "law-testclient-dev"
}

# Storage Accounts (INDEPENDIENTES)
storage_accounts = {
  website = {
    name                     = "testclientdevweb"
    storage_type             = "static_website"
    account_tier             = "Standard"
    account_replication_type = "LRS"
  }
  data = {
    name                     = "testclientdevdata"
    storage_type             = "general"
    account_tier             = "Standard"
    account_replication_type = "LRS"
  }
}

# Service Bus
service_bus = {
  create         = true
  namespace_name = "sb-testclient-dev"
  sku            = "Standard"
  queues = [
    {
      name                                        = "orders-queue"
      max_size_in_megabytes                      = 1024
      enable_dead_lettering_on_message_expiration = true
      max_delivery_count                         = 10
    }
  ]
  topics = [
    {
      name                  = "events-topic"
      max_size_in_megabytes = 1024
      subscriptions = [
        {
          name                                        = "processor-sub"
          max_delivery_count                          = 10
          enable_dead_lettering_on_message_expiration = true
        }
      ]
    }
  ]
}

# API Management
api_management = {
  create          = true
  name            = "apim-testclient-dev"
  publisher_name  = "TestClient"
  publisher_email = "devops@testclient.com"
  sku_name        = "Consumption_0"
}


# Key Vault
key_vault = {
  create                     = true
  name                       = "kv-testclient-dev"
  sku_name                   = "standard"
  soft_delete_retention_days = 7
  purge_protection_enabled   = false
  enable_rbac_authorization  = true
}

# Azure Functions Linux (Flex Consumption)
functions_linux = [
  {
    name    = "fn-testclient-processor-dev"
    runtime = "dotnet-isolated"
    version = "8.0"
    app_settings = [
      {
        name  = "ServiceBusConnection__fullyQualifiedNamespace"
        value = "sb-testclient-dev.servicebus.windows.net"
      },
      {
        name  = "FUNCTIONS_WORKER_RUNTIME"
        value = "dotnet-isolated"
      }
    ]
    instance_memory_mb     = 2048
    maximum_instance_count = 100
  },
  {
    name    = "fn-testclient-api-dev"
    runtime = "dotnet-isolated"
    version = "8.0"
    app_settings = [
      {
        name  = "Environment"
        value = "Development"
      }
    ]
    instance_memory_mb     = 2048
    maximum_instance_count = 50
  }
]


# Cosmos DB
cosmos_db = {
  create            = true
  account_name      = "cosmos-testclient-dev"
  database_name     = "testclient-db"
  enable_serverless = true
  consistency_level = "Session"
  containers = [
    {
      name           = "orders"
      partition_keys = ["/customerId"]
      throughput     = null  # null para serverless
      default_ttl    = -1    # -1 = sin TTL
    },
    {
      name           = "customers"
      partition_keys = ["/id"]
      throughput     = null
      default_ttl    = 86400  # 24 horas
    }
  ]
}

# SignalR Service
signalr = {
  create       = false
  name         = "signalr-testclient-dev"
  sku          = "Free_F1"
  capacity     = 1
  service_mode = "Default"
}


# ============================================
# VNET CONFIGURATION
# ============================================

vnet = {
  create        = true
  name          = "vnet-myproject-test-dev"
  address_space = ["10.180.0.0/16"]
  dns_servers   = [] # Opcional: ["10.180.0.4", "10.180.0.5"]
  
  subnets = {
  # Subnet básica sin delegación
  subnet_general = {
    name             = "subnet-general"
    address_prefixes = ["10.180.1.0/24"]
    service_endpoints = []
  }
  
  # Subnet para Azure Functions con delegación
  subnet_functions = {
    name             = "subnet-functions"
    address_prefixes = ["10.180.2.0/24"]
    service_endpoints = [
      "Microsoft.Storage",
      "Microsoft.KeyVault",
      "Microsoft.ServiceBus"
    ]
    delegation = {
      name = "delegation-functions"
      service_delegation = {
        name = "Microsoft.Web/serverFarms"
        actions = [
          "Microsoft.Network/virtualNetworks/subnets/action"
        ]
      }
    }
    private_endpoint_network_policies_enabled     = false
    private_link_service_network_policies_enabled = false
  }
  
  # Subnet para App Services
  subnet_apps = {
    name             = "subnet-apps"
    address_prefixes = ["10.180.3.0/24"]
    service_endpoints = [
      "Microsoft.Storage",
      "Microsoft.Sql",
      "Microsoft.Web"
    ]
    private_endpoint_network_policies_enabled     = true
    private_link_service_network_policies_enabled = true
  }
  
  # Subnet para Private Endpoints
  subnet_private_endpoints = {
    name             = "subnet-private-endpoints"
    address_prefixes = ["10.180.4.0/24"]
    service_endpoints = []
    private_endpoint_network_policies_enabled     = false
    private_link_service_network_policies_enabled = false
  }
  
  # Subnet para bases de datos
  subnet_data = {
    name             = "subnet-data"
    address_prefixes = ["10.180.5.0/24"]
    service_endpoints = [
      "Microsoft.Sql",
      "Microsoft.Storage",
      "Microsoft.AzureCosmosDB"
    ]
  }
  
  # Subnet para Application Gateway (si aplica)
  subnet_appgw = {
    name             = "subnet-appgw"
    address_prefixes = ["10.180.10.0/24"]
    service_endpoints = []
  }
}


# ============================================
# LOG ANALYTICS WORKSPACE CONFIGURATION
# ============================================

log_analytics = {
  create                     = true
  name                       = "log-myproject-test-dev"
  sku                        = "PerGB2018"  # Free, PerNode, Premium, Standard, Standalone, Unlimited, CapacityReservation, PerGB2018
  retention_in_days          = 30           # 30-730 días
  daily_quota_gb             = -1           # -1 para ilimitado
  internet_ingestion_enabled = true
  internet_query_enabled     = true
  # reservation_capacity_in_gb_per_day = 100  # Solo para CapacityReservation SKU
}


# ============================================
# AZURE FUNCTIONS (WINDOWS) CONFIGURATION
# ============================================

functions_windows = [
  # Function App - Consumption Plan
  {
    name                         = "fn-api-myproject-test-dev"
    plan_type                    = "consumption"
    create                       = true
    always_on                    = false  # No disponible en Consumption
    dotnet_version               = "v8.0"
    use_dotnet_isolated_runtime  = true
    application_insights_enabled = true
    
    app_settings = [
      {
        name         = "ENVIRONMENT"
        value        = "test-dev"
        slot_setting = false
      },
      {
        name         = "ServiceBusConnectionString"
        value        = "@Microsoft.KeyVault(SecretUri=https://mykv.vault.azure.net/secrets/ServiceBusCS/)"
        slot_setting = false
      },
      {
        name         = "StorageAccountConnectionString"
        value        = "@Microsoft.KeyVault(SecretUri=https://mykv.vault.azure.net/secrets/StorageCS/)"
        slot_setting = false
      }
    ]
    
    identity_type = "SystemAssigned"
  },
  
  # Function App - Basic Plan (B1) con VNet Integration
  {
    name                         = "fn-worker-myproject-test-dev"
    plan_type                    = "basic"
    create                       = true
    plan_name                    = "asp-worker-test-dev"  # Nombre personalizado del plan
    always_on                    = true  # Disponible en Basic
    dotnet_version               = "v8.0"
    use_dotnet_isolated_runtime  = true
    application_insights_enabled = true
    
    # VNet Integration (opcional)
    # vnet_integration = {
    #   subnet_id = "/subscriptions/xxxxx/resourceGroups/myRG/providers/Microsoft.Network/virtualNetworks/myVNet/subnets/subnet-functions"
    # }
    
    app_settings = [
      {
        name         = "ENVIRONMENT"
        value        = "test-dev"
        slot_setting = false
      },
      {
        name         = "CosmosDbConnectionString"
        value        = "@Microsoft.KeyVault(SecretUri=https://mykv.vault.azure.net/secrets/CosmosDbCS/)"
        slot_setting = false
      },
      {
        name         = "WEBSITE_TIME_ZONE"
        value        = "Eastern Standard Time"
        slot_setting = false
      }
    ]
    
    identity_type = "SystemAssigned"
  },
  
  # Function App - Consumption con Storage usando Managed Identity
  {
    name                          = "fn-events-myproject-test-dev"
    plan_type                     = "consumption"
    create                        = false  # Deshabilitado
    always_on                     = false
    dotnet_version                = "v8.0"
    use_dotnet_isolated_runtime   = true
    application_insights_enabled  = true
    storage_uses_managed_identity = true
    
    app_settings = [
      {
        name         = "EventHubConnectionString"
        value        = "@Microsoft.KeyVault(SecretUri=https://mykv.vault.azure.net/secrets/EventHubCS/)"
        slot_setting = false
      }
    ]
    
    identity_type = "SystemAssigned"
  }
]